#!/bin/bash
#=================================================
#	System Required: :Debian 9+/Ubuntu 18.04+/Centos 7+
#	Description: ClashR&V2ray&SSR script
#	Version: 1.0.0
# Official document: www.v2ray.com
#=================================================
sh_ver="VPSPACK Mod Argento"
#fonts color
RED="\033[0;31m"
NO_COLOR="\033[0m"
GREEN="\033[32m\033[01m"
FUCHSIA="\033[0;35m"
YELLOW="\033[33m"
BLUE="\033[0;36m"
GreenBG="\033[42;37m"
RedBG="\033[41;37m"
Font="\033[0m"
Green_font_prefix="\033[32m" && Red_font_prefix="\033[31m" && Green_background_prefix="\033[42;37m" && Red_background_prefix="\033[41;37m" && Font_color_suffix="\033[0m"
Info="${Green_font_prefix}[INFORMACION]${Font_color_suffix}"
Error="${Red_font_prefix}[ERROR]${Font_color_suffix}"
Tip="${Green_font_prefix}[NOTA]${Font_color_suffix}"
nginx_bin_old_file="/usr/sbin/nginx"
nginx_bin_file="/etc/nginx/sbin/nginx"
nginx_conf_dir="/etc/nginx/conf/conf.d"
nginx_conf="${nginx_conf_dir}/default.conf"
nginx_dir="/etc/nginx"
nginx_openssl_src="/usr/local/src"
nginx_systemd_file="/etc/systemd/system/nginx.service"
v2ray_bin_dir="/usr/bin/v2ray"
v2ray_systemd_file="/etc/systemd/system/v2ray.service"
v2ray_conf_dir="/etc/v2ray"
v2ray_conf="${v2ray_conf_dir}/config.json"
v2ray_shadowrocket_qr_config_file="${v2ray_conf_dir}/shadowrocket_qrconfig.json"
v2ray_win_and_android_qr_config_file="${v2ray_conf_dir}/win_and_android_qrconfig.json"
caddy_bin_dir="/usr/bin/caddy"
caddy_conf_dir="/etc/caddy"
caddy_conf="${caddy_conf_dir}/Caddyfile"
caddy_systemd_file="/usr/lib/systemd/system/caddy.service"
trojan_bin_dir="/usr/local/bin/trojan"
trojan_conf_dir="/usr/local/etc/trojan"
trojan_conf="${trojan_conf_dir}/config.json"
trojan_qr_config_file="${trojan_conf_dir}/qrconfig.json"
trojan_systemd_file="/etc/systemd/system/trojan.service"
ssr_conf_dir="/etc/shadowsocks-r"
ssr_conf="${ssr_conf_dir}/config.json"
ssr_qr_config_file="${ssr_conf_dir}/qrconfig.json"
ssr_systemd_file="/etc/init.d/shadowsocks-r"
ssr_bin_dir="/usr/local/shadowsocks"
web_dir="/usr/wwwroot"
nginx_version="1.18.0"
openssl_version="1.1.1g"
jemalloc_version="5.2.1"
old_config_status="off"
# v2ray_plugin_version="$(wget -qO- "https://github.com/shadowsocks/v2ray-plugin/tags" | grep -E "/shadowsocks/v2ray-plugin/releases/tag/"
set_SELINUX() {
  if [ -s /etc/selinux/config ] && grep 'SELINUX=enforcing' /etc/selinux/config; then
    sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config
    setenforce 0
  fi
}
sys_cmd(){
  if [[ ${release} == "centos" ]]; then
    cmd="yum"
  else
    cmd="apt"
  fi
}
set_PATH() {
  [[ -z "$(grep "export PATH=/bin:/sbin:" /etc/bashrc)" ]] && echo "export PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin" >>/etc/bashrc && source /etc/profile
}
check_root() {
  [[ $EUID != 0 ]] && echo -e "${Error} ${RedBG}No eres usuario ROOT o sin permisos ROOT, ejecute el siguiente comando${Green_background_prefix}sudo -i${Font_color_suffix} Ya eres usuario ROOT" && exit 1
}
check_nginx_pid() {
  PID=$(ps -ef | grep "nginx" | grep -v "grep" | grep -v "init.d" | grep -v "service" | awk '{print $2}')
  [[ ! -z ${PID} ]] && kill -9 ${PID}
}
check_caddy_pid() {
  PID=$(ps -ef | grep "caddy" | grep -v "grep" | grep -v "init.d" | grep -v "service" | awk '{print $2}')
  [[ ! -z ${PID} ]] && kill -9 ${PID}
}
check_v2ray_pid() {
  PID=$(ps -ef | grep "v2ray" | grep -v "grep" | grep -v "init.d" | grep -v "service" | awk '{print $2}')
  [[ ! -z ${PID} ]] && kill -9 ${PID}
}
check_ssr_pid() {
  PID=$(ps -ef | grep "SSR" | grep -v "grep" | grep -v "init.d" | grep -v "service" | awk '{print $2}')
  [[ ! -z ${PID} ]] && kill -9 ${PID}
}
check_trojan_pid() {
  PID=$(ps -ef | grep "ClashR" | grep -v "grep" | grep -v "init.d" | grep -v "service" | awk '{print $2}')
  [[ ! -z ${PID} ]] && kill -9 ${PID}
}
check_sys() {
  if [[ -f /etc/redhat-release ]]; then
    release="centos"
  elif cat /etc/issue | grep -q -E -i "debian"; then
    release="debian"
  elif cat /etc/issue | grep -q -E -i "ubuntu"; then
    release="ubuntu"
  elif cat /etc/issue | grep -q -E -i "centos|red hat|redhat"; then
    release="centos"
  elif cat /proc/version | grep -q -E -i "debian"; then
    release="debian"
  elif cat /proc/version | grep -q -E -i "ubuntu"; then
    release="ubuntu"
  elif cat /proc/version | grep -q -E -i "centos|red hat|redhat"; then
    release="centos"
  fi
  #bit=`uname -m`
}
sucess_or_fail() {
    if [[ 0 -eq $? ]]; then
        echo -e "${Info} ${GreenBG} $1 完成 ${Font}"
        sleep 1
    else
        echo -e "${Error} ${GreenBG}$1 失败${Font}"
        exit 1
    fi
}
GCE_debian10(){
  read -rp "$(echo -e "${Info}bienvenido al internet ilimitado（Y/n）？${RED}confirme su usan Debian 10 en google cloud（Y/n）(默认：n)${NO_COLOR}")" Yn
  [[ -z ${Yn} ]] && Yn="n"
    case ${Yn} in
    [yY][eE][sS] | [yY])
           is_debian10="y"
        ;;
    *)
        ;;
    esac
}
get_ip() {
  local_ip=$(curl -s https://ipinfo.io/ip)
  [[ -z ${local_ip} ]] && ${local_ip}=$(curl -s https://api.ip.sb/ip)
  [[ -z ${local_ip} ]] && ${local_ip}=$(curl -s https://api.ipify.org)
  [[ -z ${local_ip} ]] && ${local_ip}=$(curl -s https://ip.seeip.org)
  [[ -z ${local_ip} ]] && ${local_ip}=$(curl -s https://ifconfig.co/ip)
  [[ -z ${local_ip} ]] && ${local_ip}=$(curl -s https://api.myip.com | grep -oE "([0-9]{1,3}\.){3}[0-9]{1,3}")
  [[ -z ${local_ip} ]] && ${local_ip}=$(curl -s icanhazip.com)
  [[ -z ${local_ip} ]] && ${local_ip}=$(curl -s myip.ipip.net | grep -oE "([0-9]{1,3}\.){3}[0-9]{1,3}")
  [[ -z ${local_ip} ]] && echo -e "${Error}No puedo obtener su dirección IP" && exit
}
check_domain() {
  read -rp "Ingrese su nombre de dominio:" domain
  real_ip=$(ping "${domain}" -c 1 | sed '1{s/[^(]*(//;s/).*//;q}')
  while [ "${real_ip}" != "${local_ip}" ]; do
    read -rp "La IP vinculada al dominio no es correcto:" domain
    real_ip=$(ping "${domain}" -c 1 | sed '1{s/[^(]*(//;s/).*//;q}')
    read -rp "He confirmado que mi IP esta vinculado al dominio（Y/n）？（por defecto:n）" continue_install
    [[ -z ${continue_install} ]] && continue_install="n"
    case ${continue_install} in
    [yY][eE][sS] | [yY])
        echo -e "${Tip} continuar con la instalacion"
        break
        ;;
    *)
        echo -e "${Tip} instalacion terminada"
        exit 2
        ;;
    esac
  done
}
check_nginx_installed_status() {
  if [[ -f ${nginx_bin_file} ]]; then
    echo -e "${Info}Se detecta que tienes instalado Nginx!"
    nginx_install_flag="YES"
  fi
}
check_trojan_installed_status() {
  if [[ -f ${trojan_bin_dir} ]] && [[ -d ${trojan_conf_dir} ]] && [[ -f ${trojan_systemd_file} ]]; then
    echo -e "${Info}Se detecta que tienes instalado ClashR!"
    trojan_install_flag="YES"
  fi
}
check_v2ray_installed_status() {
  if [[ -d ${v2ray_bin_dir} ]] && [[ -f ${v2ray_systemd_file} ]] && [[ -d ${v2ray_conf_dir} ]]; then
    echo -e "${Info}Se detecta que tienes instalado V2ray!"
    v2ray_install_flag="YES"
  fi
}
check_ssr_installed_status() {
  if [[ -d ${ssr_conf_dir} ]] && [[ -f ${ssr_systemd_file} ]] && [[ -d ${ssr_bin_dir} ]]; then
    echo -e "${Info}Se detecta que tienes instalado SSR!"
    ssr_install_flag="YES"
  fi
}
check_caddy_installed_status() {
  if [[ -d ${caddy_bin_dir} ]] && [[ -d ${caddy_conf} ]]; then
    echo -e "${Info}Se detecta que tienes instalado Caddy!"
    caddy_install_flag="YES"
  fi
}
uninstall_old_nginx() {
  if [[ -f ${nginx_bin_old_file} ]]; then
    nginx -s stop
    echo -e "${Info}Se detecta que ha instalado la versión anterior de Nginx, y la versión anterior se desinstalará de inmediato.…………"
    if [[ ${release} == "centos" ]]; then
      yum autoremove -y nginx
      rm -rf ${nginx_dir}
    else
      apt-get autoremove -y --purge nginx # 自动删除安装nginx时安装的依赖包和/etc/nginx
      rm -rf ${nginx_dir}
    fi
    echo -e "${Info}La versión anterior de Nginx se desinstaló con éxito！"
  fi
}
uninstall_nginx() {
  if [[ -f ${nginx_bin_file} ]]; then
        echo -e "${Tip} Desinstalar Nginx [Y/N]? "
        read -r uninstall_nginx
        case ${uninstall_nginx} in
        [yY][eE][sS] | [yY])
            systemctl stop nginx
            rm -rf ${nginx_dir}
            rm -f ${nginx_systemd_file}
            echo -e "${Info} se ha desinstalado Nginx ${Font}"
            ;;
        *) ;;
        esac
    fi
}
uninstall_v2ray() {
  if [[ -d ${v2ray_bin_dir} ]] || [[ -f ${v2ray_systemd_file} ]] || [[ -d ${v2ray_conf_dir} ]]; then
    echo -e "${Info}se desinstalara V2ray……"
    [[ -f ${v2ray_systemd_file} ]] && service v2ray stop && rm -f ${v2ray_systemd_file}
    [[ -d ${v2ray_bin_dir} ]] && rm -rf ${v2ray_bin_dir}
    [[ -d ${v2ray_conf_dir} ]] && rm -rf ${v2ray_conf_dir}
    echo -e "${Info}V2ray se ha desinstalado！"
  fi
}
uninstall_caddy() {
  if [[ -f ${caddy_bin_dir} ]] ; then
    echo -e "${Info}se desinstalara Caddy……"
    systemctl stop caddy.service
     if [[ ${release} == "debian"||${release} == "ubuntu" ]]; then
        apt remove --purge caddy
     elif [[ ${release} == "centos" ]]; then
        yum remove caddy -y
     fi
    echo -e "${Info}se ha desinstalado Caddy！"
  fi
}
uninstall_web() {
  [[ -d ${web_dir} ]] && rm -rf ${web_dir} && echo -e "${Info}comienze a desinstalar el sitio web disfrazado……" && echo -e "${Info}se ha desinstalado correctamente！"
}
uninstall_trojan() {
  if [[ -f ${trojan_bin_dir} ]] || [[ -d ${trojan_conf_dir} ]] || [[ -f ${trojan_systemd_file} ]]; then
    systemctl stop trojan
    echo -e "${Info}se desinstalara ClashR"
    [[ -f ${trojan_bin_dir} ]] && rm -f ${trojan_bin_dir}
    [[ -f ${trojan_systemd_file} ]] && rm -f ${trojan_systemd_file}
    [[ -d ${trojan_conf_dir} ]] && rm -rf ${trojan_conf_dir}
    echo -e "${Info}se ha desinstalado ClashR！"
  fi
}
uninstall_ssr() {
  if [[ -d ${ssr_conf_dir} ]] || [[ -f ${ssr_systemd_file} ]] || [[ -d ${ssr_bin_dir} ]]; then
    /etc/init.d/shadowsocks-r stop
    echo -e "${Info}se desinstalara SSR……！"
    /etc/shadowsocks-r/shadowsocks-all.sh uninstall
    [[ -f ${ssr_bin_dir} ]] && rm -f ${ssr_bin_dir}
    [[ -f ${ssr_systemd_file} ]] && rm -f ${ssr_systemd_file}
    [[ -f ${ssr_conf_dir} ]] && rm -f ${ssr_conf_dir}
    echo -e "${Info}se ha desinstalado SSR！"
  fi
}
remove_mgr(){
  [[ -f "/etc/all_mgr.sh" ]] && rm -f /etc/all_mgr.sh
}
remove_motd(){
  [[ -f "/etc/motd" ]] && rm -f /etc/motd
}
port_used_check() {
    if [[ 0 -eq $(lsof -i:"$1" | grep -i -c "listen") ]]; then
        echo -e "${Info} $1 el puerto no esta ocupado"
        sleep 1
    else
        echo -e "${Error}se detecto que el puerto $1 esta ocupado$1 informacion del puerto ocupado ${Font}"
        lsof -i:"$1"
        echo -e "${Info} En 5s intentara eliminar el puerto ocupado"
        sleep 5
        lsof -i:"$1" | awk '{print $2}' | grep -v "PID" | xargs kill -9
        echo -e "${Info}se ha eliminado"
        sleep 1
    fi
}
install_v2ray() {
  if [[ ${v2ray_install_flag} == "YES" ]]; then
    read -rp "$(echo -e "${Tip}Se detecta que se ha instalado v2ray,¿desea reinstalarlo(Y/n)?(Por defecto:n)")" Yn
    [[ -z ${Yn} ]] && Yn="n"
    case ${Yn} in
    [yY][eE][sS] | [yY])
        echo -e "${Info}comenzando a instalar v2ray……"
        sleep 2
        bash -c "$(curl -fsSL https://raw.githubusercontent.com/VPSARG/VPSPK/master/v2ray/instalador)"
        ;;
    *)
        ;;
    esac
  else
    echo -e "${Info}comenzando a instalar v2ray……"
    sleep 2
    bash -c "$(curl -fsSL https://raw.githubusercontent.com/VPSARG/VPSPK/master/v2ray/instalador)"
  fi
}

install_dependency() {
  echo -e "${Info}Tardará unos minutos en empezar a actualizar el sistema……"
  ${cmd} update -y
  sucess_or_fail "actualizando sistema"
  echo -e "${Info}empezando a instalar dependencias……"
  if [[ ${cmd} == "apt" ]]; then
    apt -y install dnsutils
  else
    yum -y install bind-utils
  fi
  #sucess_or_fail "DNS工具包安装"
  ${cmd} -y install wget
  sucess_or_fail "wget"
  ${cmd} -y install unzip
  sucess_or_fail "unzip"
  ${cmd} -y install zip
  sucess_or_fail "zip"
  ${cmd} -y install curl
  sucess_or_fail "curl"
  ${cmd} -y install tar
  sucess_or_fail "tar"
  ${cmd} -y install git
  sucess_or_fail "git"
  ${cmd} -y install lsof
  sucess_or_fail "lsof"
  #${cmd} -y install firewalld
  #sucess_or_fail "firewalld安装"
  if [[ ${cmd} == "yum" ]]; then
    yum -y install crontabs
  else
    apt -y install cron
  fi
  sucess_or_fail "Instalación programada de la herramienta de tareas"
  ${cmd} -y install qrencode
  sucess_or_fail "qrencode"
  ${cmd} -y install bzip2
  sucess_or_fail "bzip2"
  if [[ ${cmd} == "yum" ]]; then
    yum install -y epel-release
  fi
  sucess_or_fail "epel-release"
  if [[ "${cmd}" == "yum" ]]; then
        ${cmd} -y groupinstall "Development tools"
    else
        ${cmd} -y install build-essential
  fi
  sucess_or_fail "instalando kit de herramientas"

  if [[ "${cmd}" == "yum" ]]; then
      ${cmd} -y install pcre pcre-devel zlib-devel epel-release dnf
  else
      ${cmd} -y install libpcre3 libpcre3-dev zlib1g-dev dbus
  fi
  ln -sf /usr/share/zoneinfo/America/Tijuana /etc/localtime
}
chrony_install() {
    echo -e "${Info}Instalar el servicio de sincronización de tiempo chróny"
    timedatectl set-ntp true
    if [[ ${release} == "centos" ]]; then
        systemctl enable chronyd && systemctl restart chronyd
      else
        systemctl enable chrony && systemctl restart chrony
     fi
    echo -e "${Info}chrony se esta implementando "
    timedatectl set-timezone America/Tijuana
    echo -e "${Info}sincronizando tiempo"
    sleep 10
    chronyc sourcestats -v
    chronyc tracking -v
    date
    read -rp "confirme si la hora es precisa(Y/N): " chrony_install
    [[ -z ${chrony_install} ]] && chrony_install="Y"
    case $chrony_install in
    [yY][eE][sS] | [yY])
        echo -e "${GreenBG}continuar con la instalacion${Font}"
        sleep 2
        ;;
    *)
        echo -e "${RedBG}instalacion terminada${Font}"
        exit 2
        ;;
    esac
}
close_firewall() {
  systemctl stop firewalld.service
  systemctl disable firewalld.service
  echo -e "${Info} firewalld 已关闭 ${Font}"
  iptables -F
}
open_port() {
  if [[ ${release} != "centos" ]]; then
    iptables -I INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT
    iptables -I INPUT -m state --state NEW -m udp -p udp --dport 80 -j ACCEPT
    ip6tables -I INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT
    ip6tables -I INPUT -m state --state NEW -m udp -p udp --dport 80 -j ACCEPT
    iptables -I INPUT -m state --state NEW -m tcp -p tcp --dport 443 -j ACCEPT
    iptables -I INPUT -m state --state NEW -m udp -p udp --dport 443 -j ACCEPT
    ip6tables -I INPUT -m state --state NEW -m tcp -p tcp --dport 443 -j ACCEPT
    ip6tables -I INPUT -m state --state NEW -m udp -p udp --dport 443 -j ACCEPT
	fi
}
install_nginx() {
  if [[ ${nginx_install_flag} == "YES" ]]; then
     echo -e "${Info}Nginx ya existe, omita el proceso de compilación e instalación${Font}"
     sleep 2
  else
    wget -nc --no-check-certificate http://nginx.org/download/nginx-${nginx_version}.tar.gz -P ${nginx_openssl_src}
    sucess_or_fail "Nginx"
    wget -nc --no-check-certificate https://www.openssl.org/source/openssl-${openssl_version}.tar.gz -P ${nginx_openssl_src}
    sucess_or_fail "openssl"
    wget -nc --no-check-certificate https://github.com/jemalloc/jemalloc/releases/download/${jemalloc_version}/jemalloc-${jemalloc_version}.tar.bz2 -P ${nginx_openssl_src}
    sucess_or_fail "jemalloc"
    cd ${nginx_openssl_src} || exit

    [[ -d nginx-"$nginx_version" ]] && rm -rf nginx-"$nginx_version"
    tar -zxvf nginx-"$nginx_version".tar.gz

    [[ -d openssl-"$openssl_version" ]] && rm -rf openssl-"$openssl_version"
    tar -zxvf openssl-"$openssl_version".tar.gz

    [[ -d jemalloc-"${jemalloc_version}" ]] && rm -rf jemalloc-"${jemalloc_version}"
    tar -xvf jemalloc-"${jemalloc_version}".tar.bz2

    [[ -d "$nginx_dir" ]] && rm -rf ${nginx_dir}

    echo -e "${Info}comenzando a instalar jemalloc……"
    sleep 2

    cd jemalloc-${jemalloc_version} || exit
    ./configure
    sucess_or_fail "compilando……"
    make && make install
    sucess_or_fail "compilando e instalando jemalloc"
    echo '/usr/local/lib' >/etc/ld.so.conf.d/local.conf
    ldconfig

    echo -e "${Info}el proceso tardara minutos……"
    sleep 4

    cd ../nginx-${nginx_version} || exit

    ./configure --prefix="${nginx_dir}" \
        --with-http_ssl_module \
        --with-http_gzip_static_module \
        --with-http_stub_status_module \
        --with-pcre \
        --with-http_realip_module \
        --with-http_flv_module \
        --with-http_mp4_module \
        --with-http_secure_link_module \
        --with-http_v2_module \
        --with-cc-opt='-O3' \
        --with-ld-opt="-ljemalloc" \
        --with-openssl=../openssl-"$openssl_version"
    sucess_or_fail "compilando"
    make && make install
    sucess_or_fail "compilando e instalando Nginx"

    # 修改基本配置
    sed -i 's/#user  nobody;/user  root;/' ${nginx_dir}/conf/nginx.conf
    sed -i 's/worker_processes  1;/worker_processes  3;/' ${nginx_dir}/conf/nginx.conf
    sed -i 's/    worker_connections  1024;/    worker_connections  4096;/' ${nginx_dir}/conf/nginx.conf
    sed -i '$i include conf.d/*.conf;' ${nginx_dir}/conf/nginx.conf

    # 删除临时文件
    rm -rf ../nginx-"${nginx_version}"
    rm -rf ../openssl-"${openssl_version}"
    rm -rf ../nginx-"${nginx_version}".tar.gz
    rm -rf ../openssl-"${openssl_version}".tar.gz

    # 添加配置文件夹，适配旧版脚本
    mkdir ${nginx_dir}/conf/conf.d
fi
}
nginx_systemd() {
  touch ${nginx_systemd_file}
  cat >${nginx_systemd_file} <<EOF
[Unit]
Description=The NGINX HTTP and reverse proxy server
After=syslog.target network.target remote-fs.target nss-lookup.target
[Service]
Type=forking
PIDFile=/etc/nginx/logs/nginx.pid
ExecStartPre=/etc/nginx/sbin/nginx -t
ExecStart=/etc/nginx/sbin/nginx -c ${nginx_dir}/conf/nginx.conf
ExecReload=/etc/nginx/sbin/nginx -s reload
ExecStop=/bin/kill -s QUIT \$MAINPID
PrivateTmp=true
[Install]
WantedBy=multi-user.target
EOF
  sucess_or_fail "Nginx systemd ServerFile"
  systemctl daemon-reload
}
install_caddy() {
  if [[ ${caddy_install_flag} == "YES" ]]; then
    read -rp "$(echo -e "${Tip}Se detecta que caddy se ha instalado,¿desea reinstalarlo(S/n)?(Por defecto: n)")" Yn
    [[ -z ${Yn} ]] && Yn="n"
    case ${Yn} in
    [yY][eE][sS] | [yY])
        echo -e "${Info}comenzando a instalar caddy……"
        if [[ ${release} == "debian"||${release} == "ubuntu" ]]; then
          echo "deb [trusted=yes] https://apt.fury.io/caddy/ /" \
             | tee -a /etc/apt/sources.list.d/caddy-fury.list
          apt update
          apt install caddy
        elif [[ ${release} == "centos" ]]; then
          yum install yum-plugin-copr
          yum copr enable @caddy/caddy
          yum install caddy
        #elif [[ ${release} == "centos" ]]; then
        #  dnf install 'dnf-command(copr)'
        #  dnf copr enable @caddy/caddy
        #  dnf install caddy
        fi
        ;;
      *)
        echo -e "${Info}instalando caddy……"
        ;;
    esac
  else
    echo -e "${Info}comenzando a instalar caddy……"
    if [[ ${release} == "debian"||${release} == "ubuntu" ]]; then
      echo "deb [trusted=yes] https://apt.fury.io/caddy/ /" \
         | tee -a /etc/apt/sources.list.d/caddy-fury.list
      apt update
      apt install caddy
    elif [[ ${release} == "centos" ]]; then
      yum install yum-plugin-copr -y
      yum copr enable @caddy/caddy -y
      yum install caddy -y
    fi
  fi
}
install_caddy_service(){
  rm -f ${caddy_systemd_file}
  #if [[ ${email} == "" ]]; then
  #  read -p "$(echo -e "${Info}请填写您的邮箱：")" email
  #  read -p "$(echo -e "${Info}邮箱输入正确吗（Y/n）？（默认：n）")" Yn
  #  [[ -z ${Yn} ]] && Yn="n"
  #  while [[ ${Yn} != "Y" ]] && [[ ${Yn} != "y" ]]; do
  #      read -p "$(echo -e "${Tip}重新填写您的邮箱：")" email
  #      read -p "$(echo -e "${Info}邮箱输入正确吗（Y/n）？（默认：n）")" Yn
  #      [[ -z ${Yn} ]] && Yn="n"
  #  done
 #fi
 #caddy -service install -agree -email "${email}" -conf "${caddy_conf}"
 random_num=$((RANDOM%12+4))
 email="$(head -n 10 /dev/urandom | md5sum | head -c ${random_num})@gmail.com"
 caddy -service install -agree -email "${email}" -conf "${caddy_conf}"
}
install_trojan() {
  if [[ ${trojan_install_flag} == "YES" ]] ; then
    read -rp "$(echo -e "${Tip}Se detecta que se ha instalado ClashR, ¿desea reinstalarlo (S / n)? (Valor predeterminado: n) ")" Sn
    [[ -z ${Yn} ]] && Yn="n"
    case ${Yn} in
    [yY][eE][sS] | [yY])
        echo -e "${Info}comenzando a instalar ClashR……"
        sleep 2
        bash -c "$(curl -fsSL https://raw.githubusercontent.com/trojan-gfw/trojan-quickstart/master/trojan-quickstart.sh)"
        ;;
    *)
        ;;
    esac
  else
    echo -e "${Info}comenzando a instalar ClashR……"
    sleep 2
    bash -c "$(curl -fsSL https://raw.githubusercontent.com/trojan-gfw/trojan-quickstart/master/trojan-quickstart.sh)"
  fi
}
install_ssr() {
  if [[ ${ssr_install_flag} == "YES" ]]; then
    read -rp "$(echo -e "${Tip}Se detecta que se ha instalado ssr, ¿desea reinstalar (Y / n)? (Predeterminado: n) ")" Yn
    [[ -z ${Yn} ]] && Yn="n"
    case ${Yn} in
    [yY][eE][sS] | [yY])
        echo -e "${Info}comienze a instalar SSR……"
        sleep 2
        [[ ! -d ${ssr_conf_dir} ]] && mkdir ${ssr_conf_dir}
        wget --no-check-certificate -O ${ssr_conf_dir}/shadowsocks-all.sh https://raw.githubusercontent.com/JeannieStudio/jeannie/master/shadowsocks-all.sh
        chmod +x ${ssr_conf_dir}/shadowsocks-all.sh
        \n | . ${ssr_conf_dir}/shadowsocks-all.sh 2>&1 | tee shadowsocks-all.log
        ;;
    *)
        ;;
    esac
  else
    echo -e "${Info}comienze a instalar SSR……"
    sleep 2
    [[ ! -d ${ssr_conf_dir} ]] && mkdir ${ssr_conf_dir}
    wget --no-check-certificate -O ${ssr_conf_dir}/shadowsocks-all.sh https://raw.githubusercontent.com/JeannieStudio/jeannie/master/shadowsocks-all.sh
    chmod +x ${ssr_conf_dir}/shadowsocks-all.sh
    \n | . ${ssr_conf_dir}/shadowsocks-all.sh 2>&1 | tee shadowsocks-all.log
  fi
}
set_port() {
    while true
    do
    dport=$(shuf -i 9000-19999 -n 1)
    echo -e "${Info}porfavor escribe$1 el numero de puerto [1-65535],NOTA: no se puede duplicar los puertos para v2ray SSR ClashR"
    read -rp "(puerto predeterminado: ${dport}):" port
    [ -z "$port" ] && port=${dport}
    expr "$port" + 1 &>/dev/null
    if [ $? -eq 0 ]; then
        if [ "$port" -ge 1 ] && [ "$port" -le 65535 ] && [ "$port" != 0 ]; then
            echo
            echo -e "${Info}$1 el puerto es：$port"
            echo
            break
        fi
    fi
    echo -e "${Error} ingrese un puerto correcto[1-65535]"
    done
}
nginx_trojan_conf() {
  touch ${nginx_conf_dir}/default.conf
  cat >${nginx_conf_dir}/default.conf <<EOF
  server {
    listen ${webport};
    server_name ${domain};
    root ${web_dir};
}
EOF
}
nginx_v2ray_conf() {
  touch ${nginx_conf_dir}/default.conf
  cat >${nginx_conf_dir}/default.conf <<EOF
  server {
      listen ${webport} ssl http2;
      ssl_certificate       /data/${domain}/fullchain.crt;
      ssl_certificate_key   /data/${domain}/privkey.key;
      ssl_protocols         TLSv1.3;
      ssl_ciphers           TLS13-AES-256-GCM-SHA384:TLS13-CHACHA20-POLY1305-SHA256:TLS13-AES-128-GCM-SHA256:TLS13-AES-128-CCM-8-SHA256:TLS13-AES-128-CCM-SHA256:EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+ECDSA+AES128:EECDH+aRSA+AES128:RSA+AES128:EECDH+ECDSA+AES256:EECDH+aRSA+AES256:RSA+AES256:EECDH+ECDSA+3DES:EECDH+aRSA+3DES:RSA+3DES:!MD5;
      server_name           $domain;
      index index.html index.htm;
      root ${web_dir};
      error_page 400 = /400.html;
      location /ray/
      {
      proxy_redirect off;
      proxy_pass http://127.0.0.1:10000;
      proxy_http_version 1.1;
      proxy_set_header X-Real-IP \$remote_addr;
      proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
      proxy_set_header Upgrade \$http_upgrade;
      proxy_set_header Connection "upgrade";
      proxy_set_header Host \$http_host;
      }
}
  server {
      listen 80;
      server_name $domain;
      # rewrite ^(.*) https://${domain}:${webport} permanent;
  }
EOF
}
tls_type() {
  if [[ -f "${nginx_bin_file}" ]] && [[ -f "${nginx_conf}" ]]; then
    echo -e "${Tip}Seleccione una versión de TLS compatible（default:3）:"
    echo -e "${Tip}si usa sistema IOS eliga la version compatible"
    echo "1: TLS1.1 TLS1.2 and TLS1.3"
    echo "2: TLS1.2 and TLS1.3"
    echo "3: TLS1.3 only"
    [[ -z ${tls_version} ]] && tls_version=3
    read -rp "porfavor escribe：" tls_version
    while [[ ${tls_version} != 1 ]] && [[ ${tls_version} != 2 ]] && [[ ${tls_version} != 3 ]]; do
      read -rp "error de entrada,vuelva a elegir：" tls_version
    done
    case $tls_version in
    1)
      sed -i 's/ssl_protocols.*/ssl_protocols         TLSv1.1 TLSv1.2 TLSv1.3;/' ${nginx_conf}
      echo -e "${OK} ${GreenBG}TLS1.1 TLS1.2 and TLS1.3 ${Font}"
      ;;
    2)
      sed -i 's/ssl_protocols.*/ssl_protocols         TLSv1.2 TLSv1.3;/' ${nginx_conf}
      echo -e "${OK} ${GreenBG}TLS1.2 and TLS1.3 ${Font}"
      ;;
    3)
      sed -i 's/ssl_protocols.*/ssl_protocols         TLSv1.3;/' ${nginx_conf}
      echo -e "${OK} ${GreenBG}TLS1.3 only ${Font}"
      ;;
    *)
      echo -e "${RedBG}Porfavor ingrese el numero correcto${Font}"
      ;;
    esac
  else
    echo -e "${Error} ${RedBG} Nginx o el archivo de configuración no existe, instale el script correctamente y ejecútelo${Font}"
  fi
}
v2ray_conf() {
  uuid=$(cat /proc/sys/kernel/random/uuid)
  read -rp "$(echo -e "${Tip}se ha generado uuid:${uuid},confirme para usar?[Y/n]?")" yn
  while [[ "${yn}" != [Yy] ]]; do
    uuid=$(cat /proc/sys/kernel/random/uuid)
    read -rp "$(echo -e "${Tip}se ha generado uuid:${uuid},confirme para usar?[Y/n]?")" yn
  done
  [[ ! -d "${v2ray_conf_dir}" ]] && mkdir ${v2ray_conf_dir}
  cat >${v2ray_conf} <<"_EOF"
	  {
  "log": {
        "access": "/var/log/v2ray/access.log",
        "error": "/var/log/v2ray/error.log",
        "loglevel": "warning"
    },
  "inbounds": [
    {
    "port":10650,
      "listen": "127.0.0.1",
      "tag": "vmess-in",
      "protocol": "vmess",
      "settings": {
        "clients": [
          {
          "id":"c793dbdf-507f-496f-8b9e-e758b58d8d8d",
          "alterId":2
          }
        ]
      },
      "streamSettings": {
        "network": "ws",
        "wsSettings": {
          "path":"/6ebb80e32/"
        }
      }
    }
  ],
  "outbounds": [
    {
      "protocol": "freedom",
      "settings": { },
      "tag": "direct"
    },
    {
      "protocol": "blackhole",
      "settings": { },
      "tag": "blocked"
    }
  ],
  "dns": {
    "servers": [
      "https+local://1.1.1.1/dns-query",
          "1.1.1.1",
          "1.0.0.1",
          "8.8.8.8",
          "8.8.4.4",
          "localhost"
    ]
 },
  "routing": {
    "domainStrategy": "AsIs",
    "rules": [
      {
        "type": "field",
        "inboundTag": [
          "vmess-in"
        ],
        "outboundTag": "direct"
      }
    ]
  }
}
_EOF
  sed -i "s/b831381d-6324-4d53-ad4f-8cda48b30811/${uuid}/g" ${v2ray_conf}
}
web_download() {
  [[ ! -d "${web_dir}" ]] && mkdir "${web_dir}"
  while [[ ! -f "${web_dir}/web.zip" ]]; do
    echo -e "${Tip}El sitio web disfrazado no se descarga o la descarga falla, seleccione cualquiera de los siguientes para descargar:
      ${Info}1. https://templated.co/intensify
      ${Info}2. https://templated.co/binary
      ${Info}3. https://templated.co/retrospect
      ${Info}4. https://templated.co/spatial
      ${Info}5. https://templated.co/monochromed
      ${Info}6. https://templated.co/transit
      ${Info}7. https://templated.co/interphase
      ${Info}8. https://templated.co/ion
      ${Info}9. https://templated.co/solarize
      ${Info}10. https://templated.co/phaseshift
      ${Info}11. https://templated.co/horizons
      ${Info}12. https://templated.co/grassygrass
      ${Info}13. https://templated.co/breadth
      ${Info}14. https://templated.co/undeviating
      ${Info}15. https://templated.co/lorikeet"
    read -rp "$(echo -e "${Tip}Ingrese el número del sitio web que desea descargar:")" aNum
    case $aNum in
    1)
      wget -O ${web_dir}/web.zip --no-check-certificate https://templated.co/intensify/download
      ;;
    2)
      wget -O ${web_dir}/web.zip --no-check-certificate https://templated.co/binary/download
      ;;
    3)
      wget -O ${web_dir}/web.zip --no-check-certificate https://templated.co/retrospect/download
      ;;
    4)
      wget -O ${web_dir}/web.zip --no-check-certificate https://templated.co/spatial/download
      ;;
    5)
      wget -O ${web_dir}/web.zip --no-check-certificate https://templated.co/monochromed/download
      ;;
    6)
      wget -O ${web_dir}/web.zip --no-check-certificate https://templated.co/transit/download
      ;;
    7)
      wget -O ${web_dir}/web.zip --no-check-certificate https://templated.co/interphase/download
      ;;
    8)
      wget -O ${web_dir}/web.zip --no-check-certificate https://templated.co/ion/download
      ;;
    9)
      wget -O ${web_dir}/web.zip --no-check-certificate https://templated.co/solarize/download
      ;;
    10)
      wget -O ${web_dir}/web.zip --no-check-certificate https://templated.co/phaseshift/download
      ;;
    11)
      wget -O ${web_dir}/web.zip --no-check-certificate https://templated.co/horizons/download
      ;;
    12)
      wget -O ${web_dir}/web.zip --no-check-certificate https://templated.co/grassygrass/download
      ;;
    13)
      wget -O ${web_dir}/web.zip --no-check-certificate https://templated.co/breadth/download
      ;;
    14)
      wget -O ${web_dir}/web.zip --no-check-certificate https://templated.co/undeviating/download
      ;;
    15)
      wget -O ${web_dir}/web.zip --no-check-certificate https://templated.co/lorikeet/download
      ;;
    *)
      wget -O ${web_dir}/web.zip --no-check-certificate https://templated.co/intensify/download
      ;;
    esac
  done
  unzip -o -d ${web_dir} ${web_dir}/web.zip
}
caddy_v2ray_conf() {
  cat >${caddy_conf} <<_EOF
https://${domain}:${webport} {
  encode gzip
  root * /usr/wwwroot
  file_server
  root * ${web_dir}
  reverse_proxy /ray/ 127.0.0.1:10000 {
      header_up Host {http.reverse_proxy.upstream.hostport}
      header_up X-Real-IP {http.request.remote}
      header_up X-Forwarded-For {http.request.remote}
      header_up X-Forwarded-Port {http.request.port}
      header_up X-Forwarded-Proto {http.request.scheme}
      }
}
_EOF
}
caddy_trojan_conf() {
  [[ ! -d ${caddy_conf_dir} ]] && mkdir ${caddy_conf_dir}
  cat >${caddy_conf} <<_EOF
http://${domain}:${webport} {
  encode gzip
  root * ${web_dir}
  file_server
  header X-Real-IP {http.request.remote.host}
  header X-Forwarded-For {http.request.remote.host}
  header X-Forwarded-Port {http.request.port}
  header X-Forwarded-Proto {http.request.scheme}
}
_EOF
}
caddy_ssr_conf() {
  cat >${caddy_conf} <<_EOF
http://${domain}:${webport} {
  encode gzip
  root * ${web_dir}
  file_server
  header X-Real-IP {http.request.remote.host}
  header X-Forwarded-For {http.request.remote.host}
  header X-Forwarded-Port {http.request.port}
  header X-Forwarded-Proto {http.request.scheme}
}
_EOF
}
trojan_conf() {
  read -rp "$(echo -e "${Info}ingrese la contraseña 1 para ClashR")" password1
  while [[ -z ${password1} ]]; do
    read -rp "$(echo -e "${Tip}No puede estar vacio,vuelva a escribir")" password1
  done
  read -rp "$(echo -e "${Info}ingrese la contraseña 2 para ClashR")" password2
  while [[ -z ${password2} ]]; do
    read -rp "$(echo -e "${Tip}No puede estar vacio,vuelva a escribir")" password2
  done
  touch ${trojan_conf}
  cat >${trojan_conf} <<_EOF
  {
    "run_type": "server",
    "local_addr": "0.0.0.0",
    "local_port": ${trojanport},
    "remote_addr": "127.0.0.1",
    "remote_port": ${webport},
    "password": [
        "${password1}",
        "${password2}"
    ],
    "log_level": 1,
    "ssl": {
        "cert": "/data/${domain}/fullchain.crt",
        "key": "/data/${domain}/privkey.key",
        "key_password": "",
        "cipher": "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384",
        "cipher_tls13": "TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_256_GCM_SHA384",
        "prefer_server_cipher": true,
        "alpn": [
            "http/1.1"
        ],
        "alpn_port_override": {
            "h2": 81
        },
        "reuse_session": true,
        "session_ticket": false,
        "session_timeout": 600,
        "plain_http_response": "",
        "curves": "",
        "dhparam": ""
    },
    "tcp": {
        "prefer_ipv4": false,
        "no_delay": true,
        "keep_alive": true,
        "reuse_port": false,
        "fast_open": false,
        "fast_open_qlen": 20
    },
    "mysql": {
        "enabled": false,
        "server_addr": "127.0.0.1",
        "server_port": 3306,
        "database": "ClashR",
        "username": "ClashR",
        "password": "",
        "cafile": ""
    }
}
_EOF
  # sed -i "8c \"$password1\"," ${trojan_conf}
  # sed -i "9c \"$password2\"," ${trojan_conf}
  # sed -i "s/password1/${password1}/g" ${trojan_conf}
  # sed -i "s/password2/${password2}/g" ${trojan_conf}
  # sed -i "/\"cert\":/c \"cert\": \"/etc/letsencrypt/live/$domain/fullchain.pem\"," ${trojan_conf}
  # sed -i "/\"key\":/c \"key\": \"/etc/letsencrypt/live/$domain/privkey.pem\"," ${trojan_conf}
}
ssr_conf() {
  read -rp "$(echo -e "${Info}ingrese la contraseña:")" password
  while [[ -z ${password} ]]; do
    read -rp "$(echo -e "${Info}no puede estar vacio,vuelva a escribir:")" password
  done
  #sed -i "\"server_port\": /c         \"server_port\":443," ${ssr_conf}
  #sed -i "\"redirect\": /c        \"redirect\":[\"*:443#127.0.0.1:80\"]," ${ssr_conf}
  cat >${ssr_conf} <<EOF
  {
    "server":"0.0.0.0",
    "server_ipv6":"::",
    "server_port":${ssrport},
    "local_address":"127.0.0.1",
    "local_port":1080,
    "password":"${password}",
    "timeout":120,
    "method":"chacha20-ietf",
    "protocol":"auth_chain_a",
    "protocol_param":"",
    "obfs":"tls1.2_ticket_auth",
    "obfs_param":"",
    "redirect":["*:${ssrport}#127.0.0.1:1234"],
    "dns_ipv6":false,
    "fast_open":true,
    "workers":1
}
EOF
}
tls_generate_script_install() {
    if [[ "${cmd}" == "yum" ]]; then
        ${cmd} install socat nc -y
    else
        ${cmd} install socat netcat -y
    fi
    sucess_or_fail "Instalar la dependencia para generar certificado TLS"

    curl https://get.acme.sh | sh
    sucess_or_fail "Generar certificado TLS"
    source ~/.bashrc
}
tls_generate() {
  if [[ -f "/data/${domain}/fullchain.crt" ]] && [[ -f "/data/${domain}/privkey.key" ]]; then
    echo -e "${Info}El certificado ya existe ... no es necesario volver a emitirlo……"
  else
    if "$HOME"/.acme.sh/acme.sh --issue -d "${domain}" --standalone -k ec-256 --force --test; then
        echo -e "${Info} La prueba del certificado TLS se emitio con éxito"
        rm -rf "$HOME/.acme.sh/${domain}_ecc"
        sleep 2
    else
        echo -e "${Error}Falló la emisión de la prueba de certificado TLS"
        rm -rf "$HOME/.acme.sh/${domain}_ecc"
        exit 1
    fi

    if "$HOME"/.acme.sh/acme.sh --issue -d "${domain}" --standalone -k ec-256 --force; then
        echo -e "${Info}Certificado TLS generado con éxito"
        sleep 2
        [[ ! -d "/data" ]] && mkdir /data
        [[ ! -d "/data/${domain}" ]] && mkdir "/data/${domain}"
        if "$HOME"/.acme.sh/acme.sh --installcert -d "${domain}" --fullchainpath /data/${domain}/fullchain.crt --keypath /data/${domain}/privkey.key --ecc --force; then
            echo -e "${Info}La configuración del certificado es exitosa"
            sleep 2
        fi
    else
        echo -e "${Error} La generación del certificado TLS falló"
        rm -rf "$HOME/.acme.sh/${domain}_ecc"
        exit 1
    fi
  fi
}
trojan_qr_config() {
  uuid=$(cat /proc/sys/kernel/random/uuid)
  touch ${trojan_qr_config_file}
  cat >${trojan_qr_config_file} <<-EOF
  "domain": "${domain}"
  "uuid": "${uuid}"
  "password1": "${password1}"
  "password2": "${password2}"
  "trojanport":"${trojanport}"
  "webport":"${webport}"
EOF
}
trojan_qr_link_image() {
  trojan_link1="trojan://${password1}@${domain}:${trojanport}"
  trojan_link2="trojan://${password2}@${domain}:${trojanport}"
  qrencode -o ${web_dir}/${uuid}-01.png -s 6 "${trojan_link1}"
  qrencode -o ${web_dir}/${uuid}-02.png -s 6 "${trojan_link2}"
  #tmp1=$(echo -n "${password1}" | base64 -w0 | sed 's/=//g;s/\//_/g;s/+/-/g')
  #tmp2=$(echo -n "${tmp1}@${domain}:443" | base64 -w0)
  #trojan_link1="trojan://${tmp2}"
  #tmp3=$(echo -n "${password2}" | base64 -w0 | sed 's/=//g;s/\//_/g;s/+/-/g')
  #tmp4=$(echo -n "${tmp3}@${domain}:443" | base64 -w0)
  #trojan_link2="trojan://${tmp4}"
  #qrencode -o ${web_dir}/${uuid}-01.png -s 6 "${trojan_link1}"
  #qrencode -o ${web_dir}/${uuid}-02.png -s 6 "${trojan_link2}"
}
trojan_info_html() {
  vps="ClashR"
  wget --no-check-certificate -O ${web_dir}/trojan_tmpl.html https://raw.githubusercontent.com/monsbri/geminis/master/numeros.html
  chmod +x ${web_dir}/trojan_tmpl.html
eval "cat <<EOF
  $(<${web_dir}/trojan_tmpl.html)
EOF
" >${web_dir}/${uuid}.html
}
trojan_info_extraction() {
  grep "$1" ${trojan_qr_config_file} | awk -F '"' '{print $4}'
}
trojan_basic_information() {
  {
echo -e "
${GREEN} ─═——————————————————— △ ClashR+tls ————————————————————═─
${YELLOW} ─═————————————【ClashR INFORMACION】 ——————————————————═─
${GREEN} DOMINIO ：   $(trojan_info_extraction '\"domain\"')
${GREEN} PUERTO ：   $(trojan_info_extraction '\"trojanport\"')
${GREEN} CONTRASEÑA 1：  $(trojan_info_extraction '\"password1\"')
${GREEN} CONTRASEÑA 2：  $(trojan_info_extraction '\"password2\"')
${GREEN} ###########################################################
${YELLOW} ─═———————————— ♂ Compartir enlace y código QR ———————————————═─
${GREEN} Enlace 1：
${trojan_link1}
${GREEN} Enlace 2：
${trojan_link2}
${GREEN} Codigo QR 1：  ${web_dir}/${uuid}-01.png
${GREEN} Codigo QR 2：  ${web_dir}/${uuid}-02.png
${YELLOW} ─═—————————————— 〄 VISITA TU SITIO WEB  ————————————————————═─
${GREEN} DETALLES：https://${domain}:${trojanport}/${uuid}.html${NO_COLOR}"
} | tee /etc/motd
}
ssr_qr_config() {
  uuid=$(cat /proc/sys/kernel/random/uuid)
  touch ${ssr_qr_config_file}
  cat >${ssr_qr_config_file} <<EOF
{
  "uuid":"${uuid}",
  "domain":"${domain}",
  "password": "$(ssr_info_extraction '\"password\"')",
  "protocol": "$(ssr_info_extraction '\"protocol\"')",
  "method": "$(ssr_info_extraction '\"method\"')",
  "obfs": "$(ssr_info_extraction '\"obfs\"')",
  "ssrport":"${ssrport}"
}
EOF
}
ssr_info_extraction() {
  grep "$1" ${ssr_conf} | awk -F '"' '{print $4}'
}
ssr_qr_info_extraction() {
  grep "$1" ${ssr_qr_config_file} | awk -F '"' '{print $4}'
}
ssr_qr_link_image(){
    password=$(ssr_info_extraction '\"password\"')
    protocol=$(ssr_info_extraction '\"protocol\"')
    method=$(ssr_info_extraction '\"method\"')
    obfs=$(ssr_info_extraction '\"obfs\"')
    tmp1=$(echo -n "${password}" | base64 -w0 | sed 's/=//g;s/\//_/g;s/+/-/g')
    tmp2=$(echo -n "${domain}:${ssrport}:${protocol}:${method}:${obfs}:${tmp1}/?obfsparam=" | base64 -w0)
    ssr_link="ssr://${tmp2}"
    qrencode -o ${web_dir}/${uuid}.png -s 8 "${ssr_link}"
}
ssr_info_html(){
  vps="SSR"
  wget --no-check-certificate -O ${web_dir}/ssr_tmpl.html https://raw.githubusercontent.com/monsbri/geminis/master/levitico.html
  chmod +x ${web_dir}/ssr_tmpl.html
  eval "cat <<EOF
  $(< ${web_dir}/ssr_tmpl.html)
EOF
  "  > ${web_dir}/${uuid}.html
}
ssr_basic_information() {
  {
echo -e "
${GREEN} ─═——————————————————— △ SSR+tls ————————————————————═─
${YELLOW} ─═————————————— 【SSR INFORMACION By ARGENTO】 ————————————————═─
${GREEN} DOMINIO ：   ${domain}
${GREEN} PUERTO ：   ${ssrport}
${GREEN} CONTRASEÑA ：  $(ssr_info_extraction '\"password\"')
${GREEN} METHODO ：  $(ssr_info_extraction '\"method\"')
${GREEN} PROTOCOLO ：  $(ssr_info_extraction '\"protocol\"')
${GREEN} OBFUSCATION ：  $(ssr_info_extraction '\"obfs\"')
${GREEN} #######################################################
${YELLOW} ─═———————————— ♂ Compartir enlace y código QR ————————————————═─
${GREEN} Compartir enlace：
${ssr_link}
${GREEN} Codigo QR：  ${web_dir}/${uuid}.png
${YELLOW} ─═——————————————〄 VISITA TU SITIO WEB —————————————————═─
${GREEN} Detalles：https://${domain}:${ssrport}/${uuid}.html${NO_COLOR}"
} | tee /etc/motd
}
v2ray_shadowrocket_qr_config() {
  touch ${v2ray_shadowrocket_qr_config_file}
  cat >${v2ray_shadowrocket_qr_config_file} <<EOF
{
  "v": "v2ray",
  "ps": "Argento_${domain}",
  "add": "${domain}",
  "port": "${webport}",
  "id": "${uuid}",
  "aid": "64",
  "net": "ws",
  "type": "none",
  "host": "${domain}",
  "path": "/ray/",
  "tls": "tls"
}
EOF
}
v2ray_win_and_android_qr_config() {
  touch ${v2ray_win_and_android_qr_config_file}
  cat >${v2ray_win_and_android_qr_config_file} <<EOF
{
  "v": "v2ray",
  "ps": "Argento_${domain}",
  "add": "${domain}",
  "port": "${webport}",
  "id": "${uuid}",
  "aid": "64",
  "net": "ws",
  "type": "none",
  "host": "/ray/",
  "tls": "tls"
}
EOF
}

v2ray_shadowrocket_qr_link_image() {
  v2ray_link1="vmess://$(base64 -w 0 ${v2ray_shadowrocket_qr_config_file})"
  qrencode -o ${web_dir}/${uuid}-1.png -s 6 "${v2ray_link1}"
}
v2ray_win_and_android_qr_link_image() {
  v2ray_link2="vmess://$(base64 -w 0 ${v2ray_win_and_android_qr_config_file})"
  qrencode -o ${web_dir}/${uuid}-2.png -s 6 "${v2ray_link2}"
}
v2ray_info_extraction() {
  grep "$1" ${v2ray_shadowrocket_qr_config_file} | awk -F '"' '{print $4}'
}
v2ray_info_html() {
  vps="v2ray"
  wget --no-check-certificate -O ${web_dir}/v2ray_tmpl.html https://raw.githubusercontent.com/monsbri/geminis/master/exodo.html
  chmod +x ${web_dir}/v2ray_tmpl.html
eval "cat <<EOF
  $(<${web_dir}/v2ray_tmpl.html)
EOF
" >${web_dir}/${uuid}.html
}
v2ray_basic_information() {
  {
    echo -e "
${GREEN} ─═————————————————————— △ V2ray+ws+tls ————————————————————═─
${YELLOW} ─═——————————————— 【V2ray INFORMACION By 🇦🇷 ARGENTO 🇦🇷】———————————————————═─
${GREEN} DIRECCION :       $(v2ray_info_extraction '\"add\"')
${GREEN} PUERTO ：        ${webport}
${GREEN} UUID ：      $(v2ray_info_extraction '\"id\"')
${GREEN} alterId ：   64
${GREEN} SECURITY ：SEGURIDAD
${GREEN}NETWORK ： ws
${GREEN} TYPE ：none
${GREEN} PATH ：/ray/
${GREEN} METODO : tls
${YELLOW} ─═————————————— ♂ Compartir enlace y código QR ————————————————═─
${GREEN} Enlace de cliente windows y android：
${BLUE}${v2ray_link2}
${GREEN} Enlace de cliente IOS：
${BLUE}${v2ray_link1}
${GREEN} Codigo QR de cliente windows y android：
${BLUE}${web_dir}/${uuid}-1.png
${GREEN} Codigo QR de cliente IOS：
${BLUE}${web_dir}/${uuid}-2.png
${YELLOW}  ─═—————————————————— 〄 VISITA TU SITIO WEB  ———————————————————═─
${GREEN}https://$(v2ray_info_extraction '\"add\"'):${webport}/${uuid}.html${NO_COLOR}"
  } | tee /etc/motd
}
download_all_mgr() {
  curl -s -o /etc/all_mgr.sh https://raw.githubusercontent.com/VPSARG/VPSPK/master/all_mgr.sh
  sucess_or_fail "submenu"
  chmod +x /etc/all_mgr.sh
}
left_second(){
    seconds_left=5
    while [ $seconds_left -gt 0 ];do
      echo -n $seconds_left
      sleep 1
      seconds_left=$(($seconds_left - 1))
      echo -ne "\r     \r"
    done
}
reboot_sys(){
  if [[ ${release} == "centos" ]]; then
    echo -e "${Info}REINICIE INMEDIATAMENTE……"
  fi
}
install_trojan_nginx() {
  set_SELINUX
  set_PATH
  check_root
  check_sys
  sys_cmd
  install_dependency
  #close_firewall
  check_caddy_installed_status
  uninstall_caddy
  check_v2ray_installed_status
  uninstall_v2ray
  check_ssr_installed_status
  uninstall_ssr
  uninstall_web
  get_ip
  check_domain
  tls_generate_script_install
  tls_generate
  check_nginx_installed_status
  install_nginx
  nginx_systemd
  set_port nginx
  webport=$port
  port_used_check "${webport}"
  nginx_trojan_conf
  web_download
  systemctl restart nginx
  systemctl enable nginx
  check_trojan_installed_status
  install_trojan
  set_port trojan
  trojanport=$port
  port_used_check "${trojanport}"
  trojan_conf
  systemctl restart trojan
  systemctl enable trojan
  trojan_qr_config
  trojan_qr_link_image
  trojan_info_html
  trojan_info_extraction
  remove_mgr
  download_all_mgr
  trojan_basic_information
  echo "unset MAILCHECK">> /etc/profile
}
install_trojan_caddy() {
  set_SELINUX
  set_PATH
  check_root
  check_sys
  sys_cmd
  install_dependency
  #close_firewall
  check_nginx_installed_status
  uninstall_nginx
  check_v2ray_installed_status
  uninstall_v2ray
  check_ssr_installed_status
  uninstall_ssr
  uninstall_web
  get_ip
  check_domain
  tls_generate_script_install
  tls_generate
  check_caddy_installed_status
  install_caddy
  #install_caddy_service
  set_port caddy
  webport=$port
  port_used_check "${webport}"
  caddy_trojan_conf
  web_download
  #caddy -service restart
  systemctl restart caddy.service
  check_trojan_installed_status
  install_trojan
  set_port trojan
  trojanport=$port
  port_used_check "${trojanport}"
  trojan_conf
  systemctl restart trojan
  systemctl enable trojan
  trojan_qr_config
  trojan_qr_link_image
  trojan_info_html
  trojan_info_extraction
  remove_mgr
  download_all_mgr
  trojan_basic_information
  echo "unset MAILCHECK">> /etc/profile
}
install_v2ray_nginx() {
  set_SELINUX
  set_PATH
  check_root
  check_sys
  sys_cmd
  install_dependency
  #close_firewall
  check_caddy_installed_status
  uninstall_caddy
  check_trojan_installed_status
  uninstall_trojan
  check_ssr_installed_status
  uninstall_ssr
  uninstall_web
  get_ip
  check_domain
  tls_generate_script_install
  tls_generate
  check_nginx_installed_status
  install_nginx
  nginx_systemd
  set_port nginx
  webport=$port
  port_used_check "${webport}"
  nginx_v2ray_conf
  tls_type
  web_download
  systemctl restart nginx
  systemctl enable nginx
  check_v2ray_installed_status
  install_v2ray
  v2ray_conf
  systemctl enable v2ray
  service v2ray restart
  v2ray_shadowrocket_qr_config
  v2ray_win_and_android_qr_config
  v2ray_shadowrocket_qr_link_image
  v2ray_win_and_android_qr_link_image
  v2ray_info_extraction
  v2ray_info_html
  remove_mgr
  download_all_mgr
  v2ray_basic_information
  echo "unset MAILCHECK">> /etc/profile
}
install_v2ray_caddy() {
  set_SELINUX
  set_PATH
  check_root
  check_sys
  sys_cmd
  install_dependency
  #close_firewall
  check_nginx_installed_status
  uninstall_nginx
  check_trojan_installed_status
  uninstall_trojan
  check_ssr_installed_status
  uninstall_ssr
  uninstall_web
  get_ip
  check_domain
  tls_generate_script_install
  tls_generate
  check_caddy_installed_status
  install_caddy
  set_port caddy
  webport=$port
  port_used_check "${webport}"
  caddy_v2ray_conf
  web_download
  #install_caddy_service
  #caddy -service restart
  systemctl restart caddy.service
  check_v2ray_installed_status
  install_v2ray
  v2ray_conf
  service v2ray restart
  systemctl enable v2ray
  v2ray_shadowrocket_qr_config
  v2ray_win_and_android_qr_config
  v2ray_shadowrocket_qr_link_image
  v2ray_win_and_android_qr_link_image
  v2ray_info_extraction
  v2ray_info_html
  remove_mgr
  download_all_mgr
  v2ray_basic_information
  echo "unset MAILCHECK">> /etc/profile
}
install_ssr_caddy() {
  set_SELINUX
  set_PATH
  check_root
  check_sys
  sys_cmd
  install_dependency
  #close_firewall
  check_nginx_installed_status
  uninstall_nginx
  check_v2ray_installed_status
  uninstall_v2ray
  check_trojan_installed_status
  uninstall_trojan
  uninstall_web
  get_ip
  check_domain
  tls_generate_script_install
  tls_generate
  check_caddy_installed_status
  install_caddy
  caddy_ssr_conf
  web_download
  #install_caddy_service
  #caddy -service restart
  systemctl restart caddy.service
  check_ssr_installed_status
  install_ssr
  set_port ssr
  ssrport=$port
  port_used_check "${ssrport}"
  ssr_conf
  ssr_info_extraction
  ssr_qr_config
  ssr_qr_link_image
  ssr_info_html
  /etc/init.d/shadowsocks-r restart
  /etc/init.d/shadowsocks-r enable
  remove_mgr
  download_all_mgr
  ssr_basic_information
  echo "unset MAILCHECK">> /etc/profile
}
install_bbr() {
  wget -N --no-check-certificate "https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/tcp.sh"
  chmod +x tcp.sh
  ./tcp.sh
}
uninstall_all() {
  check_root
  check_sys
  sys_cmd
  check_nginx_installed_status
  uninstall_nginx
  check_trojan_installed_status
  uninstall_trojan
  check_ssr_installed_status
  uninstall_ssr
  uninstall_web
  check_caddy_installed_status
  uninstall_caddy
  check_v2ray_installed_status
  uninstall_v2ray
  remove_mgr
  remove_motd
  check_nginx_pid
  check_caddy_pid
  check_v2ray_pid
  check_ssr_pid
  check_trojan_pid
  echo -e "${Info}！"
}
main() {
  echo -e "
${RED} ::::::::::::::::::::::::::::::
${YELLOW} MENU ▲v2ray-SSR ClashR By ARGENTO
${RED} ::::::::::::::::::::::::::::::
${RED} Para desinstalar elija opcion 5……
${RED} ::::::::::::::::::::::::::::::
${YELLOW}1. √ ClashR+tls+nginx
${YELLOW}2. √ ClashR+tls+caddy
${YELLOW}3. √ v2ray+tls+nginx
${YELLOW}4. √ SSR+tls+caddy
${YELLOW}5. √ Desinstalar todo
${YELLOW}6. √ instalar acelerador BBR
${YELLOW}7. √ Abrir submenu
${YELLOW}0.↲ REGRESAR${NO_COLOR}"
  read -rp "porfavor ingrese el numero：" menu_num
  case $menu_num in
  1)
    install_trojan_nginx
    ;;
  2)
    install_trojan_caddy
    ;;
  3)
    install_v2ray_nginx
    ;;
  4)
    install_ssr_caddy
    ;;
  5)
    uninstall_all
    ;;
  6)
    install_bbr
    ;;
  7)
    /etc/all_mgr.sh
    ;;
  0)
    vpspack
    ;;
  *)
    echo -e "${RedBG}ingrese el numero correcto${Font}"
    ;;
  esac
}
main
